from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
import message_descriptor
from aiogram.dispatcher.event.bases import SkipHandler
from handlers.functions.main_root_functions import *
import os

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä—É—Ç –±–æ—Ç–∞

main_root_router = Router()


@main_root_router.message(Command('start'))  # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def cmd_start(message: Message):
    '''/start - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'''
    user_id = message.from_user.id
    user_initialization(user_id)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —é–∑–µ—Ä–∞
    if await user_language.get(user_id) is None:  # –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
        awr_text, keyboard = lang_select_message()  # —Å–æ–±–∏—Ä–∞–≤–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    else:
        awr_text, keyboard = start_message(user_selection.get(user_id, 'car'),  # —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                           user_selection.get(user_id, 'track'),
                                           await user_language.get(user_id))
    await message.answer(awr_text, reply_markup=keyboard, parse_mode='Markdown')  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


@main_root_router.message(F.text == message_descriptor.eng)
async def select_eng(message: Message):
    '''ENG - –í—ã–±–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞'''
    await user_language.put(message.from_user.id, message.from_user.username, 'ENG')
    await cmd_start(message)


@main_root_router.message(F.text == message_descriptor.rus)
async def select_rus(message: Message):
    '''RUS - –í—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞'''
    await user_language.put(message.from_user.id, message.from_user.username, 'RUS')
    await cmd_start(message)


@main_root_router.message(F.text == message_descriptor.leng_swap)
async def len_swap(message: Message):
    '''RU üá∑üá∫ üîÑ EN üá¨üáß - —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞'''
    if await user_language.get(message.from_user.id) == 'ENG':
        await user_language.put(message.from_user.id, message.from_user.username, 'RUS')
    else:
        await user_language.put(message.from_user.id, message.from_user.username, 'ENG')
    await cmd_start(message)


@main_root_router.message(F.text == message_descriptor.drop)
async def ca—Åhe_drop(message: Message):
    '''–°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à'''
    delete_cache(message.from_user.id)
    await cmd_start(message)


@main_root_router.message(F.text == message_descriptor.drop_en)
async def cache_drop_en(message: Message):
    '''Drop the —Åache'''
    await ca—Åhe_drop(message)


@main_root_router.message(F.text == message_descriptor.reboot)
async def reboot(message: Message):
    '''‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ'''
    delete_selection(message.from_user.id)
    await cmd_start(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


@main_root_router.message(F.text == message_descriptor.reboot_en)
async def reboot_en(message: Message):
    '''‚¨ÖÔ∏è To start'''
    await reboot(message)


@main_root_router.message(F.text == message_descriptor.car_select)
async def car_selector(message: Message):
    '''üèéÔ∏è –í—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É'''
    user_selection.put(message.from_user.id, 'track_selector', False)
    user_selection.put(message.from_user.id, 'car_selector', True)
    await message.answer(messages.car_select_message(await user_language.get(message.from_user.id)))


@main_root_router.message(F.text == message_descriptor.car_select_en)
async def car_selector_en(message: Message):
    '''üèéÔ∏è Select a car'''
    await car_selector(message)


@main_root_router.message(F.text == message_descriptor.track_select)
async def track_selector(message: Message):
    '''üèÅ –í—ã–±—Ä–∞—Ç—å —Ç—Ä–∞—Å—Å—É'''
    user_selection.put(message.from_user.id, 'car_selector', False)
    user_selection.put(message.from_user.id, 'track_selector', True)
    await message.answer(messages.track_select_message(await user_language.get(message.from_user.id)))


@main_root_router.message(F.text == message_descriptor.track_select_en)
async def track_selector_en(message: Message):
    '''üèÅ Select a track'''
    await track_selector(message)


@main_root_router.message(F.text == message_descriptor.track_guide)
async def track_guide(message: Message):
    '''üìö –¢—Ä–µ–∫–≥–∞–π–¥—ã'''
    car = user_selection.get(message.from_user.id, 'car')
    track = user_selection.get(message.from_user.id, 'track')
    if car is None or track is None:
        await cmd_start(message)
        raise SkipHandler
    answer = await trackguide_select(car, track)
    if answer is None or answer == '':
        await message.answer(messages.fail_tg(await user_language.get(message.from_user.id)))
    else:
        await message.answer(f'{answer}')


@main_root_router.message(F.text == message_descriptor.track_guide_en)
async def track_guide_en(message: Message):
    '''üèÅ Select a track'''
    await track_guide(message)


@main_root_router.message(F.text == message_descriptor.setups)
async def setup(message: Message):
    '''üõ† –°–µ—Ç–∞–ø—ã'''
    car = user_selection.get(message.from_user.id, 'car')
    track = user_selection.get(message.from_user.id, 'track')
    if car is None or track is None:
        await cmd_start(message)
        raise SkipHandler
    path = f'setups/{car[1:]}/{track[1:]}/setups.zip'
    if os.path.isfile(path):
        await message.answer_document(FSInputFile(path))
    else:
        await message.answer(messages.fail_setup(await user_language.get(message.from_user.id)))


@main_root_router.message(F.text == message_descriptor.setups_en)
async def setups_en(message: Message):
    '''üõ† Setups'''
    await setup(message)


@main_root_router.message()
async def handler_selector(message: Message):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞—Å—Å–∞–º–∏ –∏ –º–∞—à–∏–Ω–∞–º–∏
       –ï—Å–ª–∏ –≤ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –±–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã –∏–ª–∏ —Ç—Ä–∞—Å—Å—ã,
       —Ö–µ–Ω–¥–ª–µ—Ä –≤–µ—Ä–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö'''
    match (message.from_user.id):
        case (id) if user_selection.get(id, 'car_selector'):
            if car_selection(id, message.text):
                reset_select()
                await cmd_start(message)

        case (id) if user_selection.get(id, 'track_selector'):
            if track_selection(id, message.text):
                reset_select()
                await cmd_start(message)

    raise SkipHandler
