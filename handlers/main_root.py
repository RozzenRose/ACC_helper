from aiogram import F, Router
from aiogram.filters import  Command
from aiogram.types import Message, FSInputFile
from aiogram import types
import message_descriptor
from custom_classes import user_data, user_selection
from aiogram.dispatcher.event.bases import SkipHandler

from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
from DB_config import settings

#–û—Å–Ω–æ–≤–Ω–æ–π —Ä—É—Ç –±–æ—Ç–∞

main_root_router = Router()

engine = create_async_engine(
    url=settings.DATABASE_URL_asyncpg,
    echo=False
)


#/start
@main_root_router.message(Command('start')) #—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def cmd_start(message: Message):
    user_selection.__init__(user_id=message.from_user.id)
    user_data.__init__(user_id=message.from_user.id)      #–æ–±—å—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –∫—ç—à–µ–º
    b_conf = [[types.KeyboardButton(text=message_descriptor.calc_select)],     #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏—à–∏
            [types.KeyboardButton(text=message_descriptor.setups), types.KeyboardButton(text=message_descriptor.track_guide)],
            [types.KeyboardButton(text=message_descriptor.car_select), types.KeyboardButton(text=message_descriptor.track_select)],
            [types.KeyboardButton(text=message_descriptor.drop)]]
    car = user_selection.get(message.from_user.id, 'car')
    track = user_selection.get(message.from_user.id, 'track')
    #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∞–≤–∏—à–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(keyboard=b_conf, resize_keyboard=True, input_field_placeholder='–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?')
    #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã Asetto Corsa Competizione!\n\n'
                         f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–∞–ø—ã –∏–ª–∏ —Ç—Ä–µ–∫–≥–∞–π–¥—ã, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–∞—Å—Å—É –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n\n'
                         f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ—Ç–∞–ø—ã –∫ –º–∞—à–∏–Ω–µ, –æ—Ç–∫—Ä–æ–π –∞—Ä—Ö–∏–≤ –∏ –ø–æ–º–µ—Å—Ç–∏ —Ñ–∞–π–ª—ã –∏–∑ –Ω–µ–≥–æ –≤:\n ___C:\\users\\username\\Assetto Corsa Competizione\\Setups\\–ø–∞–ø–∫–∞ –º–∞—à–∏–Ω—ã\\–ø–∞–ø–∫–∞ —Ç—Ä–∞—Å—Å—ã___\n\n'
                         f'üèéÔ∏è –¢–µ–∫—É—â–∞—è –º–∞—à–∏–Ω–∞:   *{car[1:] if car != None else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã"}*\n'
                         f'üèÅ –¢–µ–∫—É—â–∞—è —Ç—Ä–∞—Å—Å–∞:   *{track[1:] if track != None else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–∞—Å—Å—ã"}*', reply_markup=keyboard, parse_mode='Markdown')

#–°–±—Ä–æ—Å –∫–µ—à–∞
@main_root_router.message(F.text == message_descriptor.drop)
async def cash_drop(message: Message):
    try:
        user_selection.forget_all(message.from_user.id) #–ó–∞–±—ã–≤–∞–µ–º –µ–≥–æ –≤—ã–±–æ—Ä—ã
        user_data.forget_all(message.from_user.id)      #–û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except NameError:
        pass
    await cmd_start(message)

#–∫–Ω–æ–ø–∫–∞ '–í –Ω–∞—á–∞–ª–æ'
@main_root_router.message(F.text == message_descriptor.reboot)
async def reboot(message: Message):
    try:
        user_data.forget_all(message.from_user.id)  #–û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except NameError:
        pass
    await cmd_start(message)                    #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

@main_root_router.message(F.text == message_descriptor.car_select)
async def fuel_calc(message: Message):
    user_selection.put(message.from_user.id, 'car_selector', True)
    await message.answer(f'–í—ã–±–µ—Ä–∏ –º–∞—à–∏–Ω—É:\n\n'
                         f'Porsche:\n'
                         f'/Porsche_922_GT3R\n'
                         f'Ferrari:\n'
                         f'/Ferrari_296_GT3\n'
                         f'Lamborghini:\n'
                         f'/Lamborghini_Huracan_GT3_EVO_2\n\n')

#/start -> –í—ã–±–æ—Ä —Ç—Ä–∞—Å—Å—ã
@main_root_router.message(F.text == message_descriptor.track_select)
async def fuel_calc(message: Message):
    user_selection.put(message.from_user.id, 'track_selector', True)
    await message.answer(f'–í—ã–±–µ—Ä–∏ —Ç—Ä–∞—Å—Å—É:\n'
                         f'/Spa_Francorchamps\n'
                         f'/Monza\n'
                         f'/Misano')

@main_root_router.message(F.text == message_descriptor.track_guide)
async def track_guide(message: Message):
    car = user_selection.get(message.from_user.id, 'car')
    track = user_selection.get(message.from_user.id, 'track')
    if car != None and track != None:
        async with engine.connect() as conn:
            res = await conn.execute(text(f'select track_guide from "Info" '
                                      f'where car_id = (select id from "Cars" '
                                      f"                where car_name = '{car[1:]}') and"
                                      f'      track_id = (select id from "Tracks"'
                                      f"                where track_name = '{track[1:]}')"))
            await message.answer(f'{res.first()[0]}')
    else:
        await cmd_start(message)

@main_root_router.message(F.text == message_descriptor.setups)
async def setup(message: Message):
    car = user_selection.get(message.from_user.id, 'car')
    track = user_selection.get(message.from_user.id, 'track')
    if car != None and track != None:
        try:
            setup_path = FSInputFile(f'setups/{car[1:]}/{track[1:]}/setups.zip')
            await message.answer_document(setup_path)
        except:
            await message.answer('–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ç–∞–ø–æ–≤ –¥–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω—ã –∏ —Ç—Ä–∞—Å—Å—ã')
    else:
        await cmd_start(message)


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—ã–±–æ—Ä —Ç—Ä–∞—Å—Å –∏–ª–∏ –º–∞—à–∏–Ω
@main_root_router.message()
async def handler_selector(message: Message):
    match (message.from_user.id):
        case (id) if user_selection.get(id, 'car_selector'):
            if message.text[0] == '/':
                user_selection.put(message.from_user.id, 'car', message.text)
                await cmd_start(message)
            user_selection.put(message.from_user.id, 'car_selector', False)

        case (id) if user_selection.get(id, 'track_selector'):
            if message.text[0] == '/':
                user_selection.put(message.from_user.id, 'track', message.text)
                await cmd_start(message)
            user_selection.put(message.from_user.id, 'track_selector', False)

    raise SkipHandler



