def start_message_letter(car, track):
    return (f'–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã Asetto Corsa Competizione!\n\n'
            f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–∞–ø—ã –∏–ª–∏ —Ç—Ä–µ–∫–≥–∞–π–¥—ã, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–∞—Å—Å—É –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n\n'
            f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ—Ç–∞–ø—ã –∫ –º–∞—à–∏–Ω–µ, –æ—Ç–∫—Ä–æ–π –∞—Ä—Ö–∏–≤ –∏ –ø–æ–º–µ—Å—Ç–∏ —Ñ–∞–π–ª—ã –∏–∑ –Ω–µ–≥–æ –≤:\n '
            f'___C:\\users\\username\\Assetto Corsa Competizione\\Setups\\–ø–∞–ø–∫–∞ –º–∞—à–∏–Ω—ã\\–ø–∞–ø–∫–∞ —Ç—Ä–∞—Å—Å—ã___\n\n'
            f'üèéÔ∏è –¢–µ–∫—É—â–∞—è –º–∞—à–∏–Ω–∞:   *{car[1:] if car != None else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã"}*\n'
            f'üèÅ –¢–µ–∫—É—â–∞—è —Ç—Ä–∞—Å—Å–∞:   *{track[1:] if track != None else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–∞—Å—Å—ã"}*')

def start_message_letter_en(car, track):
    return (f'Hello! It is bot-helper for the Asetto Corsa Competizione!\n\n'
            f'Choose your car and track to get track guide and setups.\n\n'
            f'To apply the setups to the car, open the archive and place the files from it into the path:\n '
            f'___C:\\users\\username\\Assetto Corsa Competizione\\Setups\\car folder\\track folder___\n\n'
            f'üèéÔ∏è Current car:   *{car[1:] if car != None else "No selected car"}*\n'
            f'üèÅ Current track:   *{track[1:] if track != None else "No selected track"}*')

car_select_message = (f'–í—ã–±–µ—Ä–∏ –º–∞—à–∏–Ω—É:\n\n'
                        f'Porsche:\n'
                        f'/Porsche_922_GT3R\n'
                        f'Ferrari:\n'
                        f'/Ferrari_296_GT3\n'
                        f'Lamborghini:\n'
                        f'/Lamborghini_Huracan_GT3_EVO_2\n'
                        f'BMW:\n'
                        f'/BMW_M4_GT3\n'
                        f'McLaren:\n'
                        f'/McLaren_720s_EVO_GT3\n'
                        f'Ford:\n'
                        f'/Ford_Mustang_GT3\n'
                        f'Aston Martin:\n'
                        f'/Aston_Martin_V8_Vantage\n')
car_select_message_en = (f'Select a car:\n\n'
                        f'Porsche:\n'
                        f'/Porsche_922_GT3R\n'
                        f'Ferrari:\n'
                        f'/Ferrari_296_GT3\n'
                        f'Lamborghini:\n'
                        f'/Lamborghini_Huracan_GT3_EVO_2\n'
                        f'BMW:\n'
                        f'/BMW_M4_GT3\n'
                        f'McLaren:\n'
                        f'/McLaren_720s_EVO_GT3\n'
                        f'Ford:\n'
                        f'/Ford_Mustang_GT3\n'
                        f'Aston Martin:\n'
                        f'/Aston_Martin_V8_Vantage\n')

track_select_message = (f'–í—ã–±–µ—Ä–∏ —Ç—Ä–∞—Å—Å—É:\n'
                        f'/Spa_Francorchamps\n'
                        f'/Monza\n'
                        f'/Misano\n'
                        f'/Hungaroring\n'
                        f'/Watkins_Glen\n'
                        f'/Mount_Panorama\n'
                        f'/Imola')
track_select_message_en = (f'Select a track:\n'
                        f'/Spa_Francorchamps\n'
                        f'/Monza\n'
                        f'/Misano\n'
                        f'/Hungaroring\n'
                        f'/Watkins_Glen\n'
                        f'/Mount_Panorama\n'
                        f'/Imola')

calculator_selector = ('–ü—Ä–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ, –±–æ—Ç –ø–æ—Å—á–∏—Ç–∞–µ—Ç —Ç–æ–ø–ª–∏–≤–æ –∏—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –∫—Ä—É–≥ –∏ –ø—Ä–µ–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä—É–≥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç—Ä–∞—Å—Å—ã –Ω–∞ –∞–≤—Ç–æ–∏–æ–±–∏–ª–µ –∫–ª–∞—Å—Å–∞ GT3\n\n'
                       '–ü—Ä–∏ —Ç–æ—á–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à —Å—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –∫—Ä—É–≥, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫—Ä—É–≥–∞\n')
calculator_selector_en = ('For an approximate calculation, the bot will calculate the fuel based on the approximate fuel consumption per lap and the approximate lap time for the specified track on a GT3 class car\n\n'
                          'For an accurate calculation, you will need to indicate your average fuel consumption per lap, as well as your average lap time.')

def accurate_calculator(fuel_flow, lap_time, race_time, answer):
    return (f'–í–≤–µ–¥–∏ –Ω–µ–æ—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞! \n'
            f'–õ—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–Ω–æ–≥–æ\n\n'
            f'–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n'
            f'–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –∫—Ä—É–≥: \n'
            f'*{fuel_flow if fuel_flow is not None else "–ù–ï–¢ –î–ê–ù–ù–´–•"}* –ª–∏—Ç—Ä–æ–≤ –Ω–∞ –∫—Ä—É–≥\n\n'
            f'–°—Ä–µ–¥–Ω–µ–µ –≤–µ—Ä–º—è –∫—Ä—É–≥–∞: \n'
            f'*{int(lap_time.total_seconds() // 60) if lap_time is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'}* –º–∏–Ω—É—Ç \n'
            f'*{lap_time.seconds - (int(lap_time.total_seconds() // 60) * 60) if lap_time is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'}* —Å–µ–∫—É–Ω–¥ \n'
            f'*{str(lap_time.total_seconds()).split('.')[1].ljust(3, '0') if lap_time is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'}* –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã \n\n'
            f'–û–±—â–µ–µ –≤—Ä–µ–º—è –≥–æ–Ω–∫–∏: \n'
            f'{int(race_time.total_seconds() // 3600) if race_time is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'} —á–∞—Å–æ–≤ \n'
            f'{round(int(race_time.total_seconds() // 60) - (int(race_time.total_seconds() // 3600) * 60), 3) if race_time is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'} –º–∏–Ω—É—Ç \n\n'
            f'–ù–∞ —ç—Ç—É –≥–æ–Ω–∫—É –Ω—É–∂–Ω–æ –∑–∞–ª–∏—Ç—å *{round(answer, 3) if answer is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'}* –ª–∏—Ç—Ä–æ–≤\n'
            f'–ï—Å–ª–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω —Ä–∞–∑–æ–≥—Ä–µ–≤–æ—á–Ω—ã–π –∫—Ä—É–≥, –∑–∞–ª–∏—Ç—å –Ω—É–∂–Ω–æ *{(round(answer, 3) + fuel_flow) if answer is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'} –ª–∏—Ç—Ä–æ–≤*')
def accurate_calculator_en(fuel_flow, lap_time, race_time, answer):
    return (f'Enter the required data to calculate fuel!\n'
            f'Any parameter can be specified again\n\n'
            f'Current data:\n\n'
            f'Fuel consumption per lap: \n'
            f'*{fuel_flow if fuel_flow is not None else 'NO DATA'}* liters per lap\n\n'
            f'Average lap time: \n'
            f'*{int(lap_time.total_seconds() // 60) if lap_time is not None else 'NO DATA'}* minutes \n'
            f'*{lap_time.seconds - (int(lap_time.total_seconds() // 60) * 60) if lap_time is not None else 'NO DATA'}* seconds \n'
            f'*{str(lap_time.total_seconds()).split('.')[1].ljust(3, '0') if lap_time is not None else 'NO DATA'}* milliseconds \n\n'
            f'Race duration: \n'
            f'*{int(race_time.total_seconds() // 3600) if race_time is not None else 'NO DATA'}* hours \n'
            f'*{round(int(race_time.total_seconds() // 60) - (int(race_time.total_seconds() // 3600) * 60), 3) if race_time is not None else 'NO DATA'}* minutes \n\n'
            f'You need to fill up *{round(answer, 3) if answer is not None else 'NO DATA'}* liters\n'
            f'If a warm-up circle is provided, you will need *{(round(answer, 3) + fuel_flow) if answer is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'}* litres')

get_flow = f'–í–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –∫—Ä—É–≥, –¥–µ—Å—è—Ç—ã–µ –æ—Ç–¥–µ–ª–∏ —Ç–æ—á–∫–æ–π:'
get_flow_en = f'Enter the average fuel consumption per lap, separating tenths with a dot:'

get_lap_time = (f'–í–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫—Ä—É–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `Min:Sec:Mic` : \n'
                f'–ï—Å–ª–∏ —Ç–≤–æ–π –∫—Ä—É–≥ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç `Sec:Mic`')
get_lap_time_en = (f'Enter average lap time in `Min:Sec:Mic` format: \n'
                   f'If your lap time is less than a minute just use `Sec:Mic` format:')

get_race_duration = (f'–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã `Hour:Min` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ `Min`')
get_race_duration_en = (f'You can use formats `Hour:Min` or `Min`')

abort_flow = (f'–¢–æ —á—Ç–æ —Ç—ã –≤–≤–µ–ª –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n\n'
              f'–í–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –∫—Ä—É–≥, –¥–µ—Å—è—Ç—ã–µ –æ—Ç–¥–µ–ª–∏ —Ç–æ—á–∫–æ–π:')
abort_flow_en = (f'What you entered could not be converted into a number, try again\n\n'
                 f'Enter the average fuel consumption per lap, separating tenths with a dot:')

abort_lap_time = (f'–¢–æ —á—Ç–æ —Ç—ã –≤–≤–µ–ª –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º—è \n \n'
                  f'–í–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫—Ä—É–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `Min:Sec:Mic` : \n'
                  f'–ï—Å–ª–∏ —Ç–≤–æ–π –∫—Ä—É–≥ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã, –ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ `Sec:Mic`')
abort_lap_time_en = (f'What you entered could not be converted into time lap, try again \n \n'
                     f'Use `Min:Sec:Mic` format: \n'
                     f'If your lap time is less than a minute just use `Sec:Mic` format')

abort_race_duration = (f'–¢–æ —á—Ç–æ —Ç—ã –≤–≤–µ–ª –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∑–æ–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–Ω–∫–∏\n\n'
                                     f'–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã `Hour:Min` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ `Min`')
abort_race_duration_en = (f'What you entered could not be convert inte time of race duration\n\n'
                          f'Use `Hour:Min` or `Min` formats')
def aprox_calculation(track, race_time, answer, lap_flow, lap_time):
    return(f'–î–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Å—Å—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–Ω–∫–∏. '
            f'–ë–æ—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä—É–≥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ—Å—á–∏—Ç–∞–µ—Ç —Ç–æ–ø–ª–∏–≤–æ. '
            f'–†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏–º–µ—Ä–Ω—ã–º, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–µ–∑–¥–æ–≤!\n\n'
            f'–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç—Ä–∞—Å—Å–∞: {track[1:] if track is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'}\n'
            f'–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –Ω–∞ –∫—Ä—É–≥: {lap_flow if lap_flow is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'}\n'
            f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∫—Ä—É–≥–∞: {lap_time if lap_time is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'}\n\n'
            f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–Ω–∫–∏: \n'
            f'{int(race_time.total_seconds() // 3600) if race_time is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'} —á–∞—Å–æ–≤\n'
            f'{round(int(race_time.total_seconds() // 60) - (int(race_time.total_seconds() // 3600) * 60), 3) if race_time is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'} –º–∏–Ω—É—Ç\n\n'
            f'–¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–ª–∏—Ç—å: {round(answer, 3) if answer is not None else '–ù–ï–¢ –î–ê–ù–ù–´–•'} –ª–∏—Ç—Ä–æ–≤')

def aprox_calculation_en(track, race_time, answer, lap_flow, lap_time):
    return(f'To calculate the approximate fuel cost, you need to specify the route and duration of the race.\n\n '
            f'The bot will calculate fuel from approximate lap time and consumption values.\n\n '
            f'The calculation will be very approximate, not recommended for important races!\n\n'
            f'Selected route: {track[1:] if track is not None else 'NO DATA'}\n'
            f'Approximate consumption per circle: {lap_flow if lap_flow is not None else 'NO DATA'}\n'
            f'Approximate lap time: {lap_time if lap_time is not None else 'NO DATA'}\n\n'
            f'Race duration: \n'
            f'{int(race_time.total_seconds() // 3600) if race_time is not None else 'NO DATA'} hours\n'
            f'{round(int(race_time.total_seconds() // 60) - (int(race_time.total_seconds() // 3600) * 60), 3) if race_time is not None else 'NO DATA'} minutes\n\n'
            f'You need to fill up: {round(answer, 3) if answer is not None else 'NO DATA'} liters')

failed_aprox = '–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ —ç—Ç–æ–π —Ç—Ä–∞—Å—Å–µ'
failed_aprox_en = "We don't have enough data yet to make an approximate calculation."

fail_tg = f'–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫ –≥–∞–π–¥–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞—Å—Å—ã –ø–æ–¥ —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å'
fail_tg_en = f"We don't have track guide for this car on this track yet"